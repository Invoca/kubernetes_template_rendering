# frozen_string_literal: true

require "ostruct"
require "open3"
require "shellwords"
require "yaml"

# This is a base class for all Templates. Derived classes must implement the render method.
module KubernetesTemplateRendering
  class Template < OpenStruct
    attr_reader :template_path, :variables, :source_repo, :variable_overrides

    def initialize(template_path, variables, source_repo: nil, variable_overrides: {})
      @template_path      = template_path
      @variables          = variables.merge(variable_overrides)
      @source_repo        = source_repo
      @variable_overrides = variable_overrides
    end

    def render(args)
      raise "must be defined by subclass"
    end

    private

    def with_auto_generated_yaml_comment(yaml_string)
      comment = <<~EOS
      # WARNING: DO NOT EDIT THIS FILE!
      # Any changes made here will be lost.
      # This file is autogenerated from #{full_template_path}
      EOS
      comment + variable_override_comment + yaml_string
    end

    def full_template_path
      if source_repo
        "https://github.com/#{source_repo}/blob/-/#{template_path.start_with?("/") ? template_path[1..-1] : template_path}"
      else
        template_path
      end
    end

    def variable_override_comment
      if variable_overrides&.any?
        <<~EOS
        # Variable overrides used: #{variable_overrides.to_json}
        EOS
      end || ""
    end

    class << self
      # @param [String] template_path: file path to template file that needs to be rendered.
      # @param [Hash]: variables that will be used in the template file to generate distict files.
      #
      # @return [String] generated YAML file
      # @return [Hash] Hash of file names as keys with the values being corresponding generated YAML.
      #
      # @raise [UnexpectedFileTypeError] if file type doesn't match [yaml.erb, erb, or jsonnet]
      # @raise [MultiFileJsonnetRenderError] if Jsonnet template files don't follow proper MultiFileJsonnet templating.

      # TODO
      # The ErbTemplate and JsonnetTemplate classes both inherit from the Template class and implement a render method.
      # However, the erb_binding parameter is used just in ErbTemplate, while the jsonnet_library_path parameter is used just in JsonnetTemplate.
      # This is a little awkward. Potentially this could be refactored.
      def render(template_path, variables, erb_binding: nil, jsonnet_library_path: nil, source_repo: nil, variable_overrides: {})
        new(template_path, variables, source_repo:, variable_overrides:).render(erb_binding: erb_binding, jsonnet_library_path: jsonnet_library_path)
      end
    end
  end
end
